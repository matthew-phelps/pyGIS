import requests
import osm2geojson
import json
import os

# Define the output file path
output_file_path = os.path.join("data", "data_raw", "landuse.geojson")

# Define the Overpass API endpoint and the query
overpass_url = "http://overpass-api.de/api/interpreter"
overpass_query = """
[out:xml][timeout:100];
 area(3605175925) -> .area_0;
(
    way["landuse"](area.area_0);
    relation["landuse"](area.area_0);
);
(._;>;);
out body;
"""

# Send the request to the Overpass API
response = requests.post(overpass_url, data=overpass_query)

# Check if the response was successful
if response.status_code == 200:
    # Get the XML response content as a string
    xml_data = response.content.decode('utf-8')

    # Convert the XML to GeoJSON using osm2geojson
    geojson_data = osm2geojson.xml2geojson(xml_data)

    # Filter the GeoJSON to include only polygons and multipolygons
    filtered_features = []
    for feature in geojson_data['features']:
        if feature['geometry']['type'] in ['Polygon', 'MultiPolygon']:
            # Extract the landuse tag and add it as a new property
            tags = feature['properties']
            landuse = tags.get('landuse', None)
            feature_id = feature.get('id', 'unknown')

            # Debugging information
            print(f"Before setting landuse_type: Feature ID: {feature_id}, Tags: {tags}")

            if landuse is None:
                print(f"Warning: No landuse tag found for feature ID {feature_id}")
            else:
                print(f"Feature ID: {feature_id}, Landuse: {landuse}")
            feature['properties']['landuse_type'] = landuse

            # Debugging information after setting landuse_type
            print(f"After setting landuse_type: Feature ID: {feature_id}, Tags: {feature['properties']}")

            filtered_features.append(feature)

    filtered_geojson_data = {
        "type": "FeatureCollection",
        "features": filtered_features
    }

    # Ensure the directory exists
    os.makedirs(os.path.dirname(output_file_path), exist_ok=True)

    # Save the filtered GeoJSON data to the output file
    with open(output_file_path, "w", encoding="utf-8") as file:
        json.dump(filtered_geojson_data, file, ensure_ascii=False, indent=4)

    print(f"Converted XML to GeoJSON, filtered to polygons, and saved to {output_file_path}")

    # Print the saved GeoJSON data to verify the content
    with open(output_file_path, "r", encoding="utf-8") as file:
        data = json.load(file)
        for feature in data['features']:
            print(f"Feature ID: {feature.get('id', 'unknown')}, Landuse Type: {feature['properties'].get('landuse_type', 'NULL')}")

else:
    print(f"Error: Overpass API request failed with status code {response.status_code}")
